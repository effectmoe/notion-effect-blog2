/**
 * Áµ±Âêà„Ç∞„É´„Éº„ÉóË°®Á§∫‰øÆÊ≠£„Çπ„ÇØ„É™„Éó„Éà
 * ÈÉΩÈÅìÂ∫úÁúå„Éá„Éº„Çø„Éô„Éº„Çπ„ÅÆÊàêÂäüË¶ÅÂõ†„ÇíÂÖ®„Å¶„ÅÆ„Ç∞„É´„Éº„ÉóÂåñ„Åï„Çå„Åü„Éá„Éº„Çø„Éô„Éº„Çπ„Å´ÈÅ©Áî®
 */

(function() {
  'use strict';
  
  console.log('üîß Unified Group Fix: Starting...');
  
  // „Ç∞„É´„Éº„ÉóÂåñ„Åï„Çå„Åü„Éá„Éº„Çø„Éô„Éº„Çπ„Çí‰øÆÊ≠£„Åô„ÇãÁµ±ÂêàÈñ¢Êï∞
  function fixAllGroupedDatabases() {
    // 1. ÂÖ®„Å¶„ÅÆ„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Éì„É•„Éº„ÇíÊ§úÁ¥¢
    const collectionViews = document.querySelectorAll('.notion-collection-view');
    
    collectionViews.forEach(view => {
      const blockElement = view.closest('[class*="notion-block-"]');
      if (!blockElement) return;
      
      // „Éñ„É≠„ÉÉ„ÇØID„ÇíÊäΩÂá∫
      const blockId = blockElement.className.match(/notion-block-([a-f0-9]+)/)?.[1];
      if (!blockId) return;
      
      console.log(`üìä Processing collection: ${blockId}`);
      
      // 2. ‰∏°Êñπ„ÅÆ„Ç∞„É´„Éº„Éó„ÇØ„É©„Çπ„Çí„ÉÅ„Çß„ÉÉ„ÇØ
      const hasOldGroups = view.querySelectorAll('.notion-list-view-group').length > 0;
      const hasNewGroups = view.querySelectorAll('.notion-collection-group').length > 0;
      
      if (hasOldGroups || hasNewGroups) {
        console.log(`  ‚úì Found groups (old: ${hasOldGroups}, new: ${hasNewGroups})`);
        
        // 3. Âè§„ÅÑ„ÇØ„É©„Çπ„ÇíÊñ∞„Åó„ÅÑ„ÇØ„É©„Çπ„Å´Áµ±‰∏Ä
        if (hasOldGroups) {
          const oldGroups = view.querySelectorAll('.notion-list-view-group');
          oldGroups.forEach(group => {
            group.classList.add('notion-collection-group');
            console.log('  ‚Üí Converted old group class to new');
          });
          
          const oldTitles = view.querySelectorAll('.notion-list-view-group-title');
          oldTitles.forEach(title => {
            title.classList.add('notion-collection-group-title');
          });
        }
        
        // 4. „Ç∞„É´„Éº„Éó„ÅÆË°®Á§∫„ÇíÂº∑Âà∂
        const allGroups = view.querySelectorAll('.notion-collection-group');
        allGroups.forEach(group => {
          group.style.display = 'block';
          group.style.visibility = 'visible';
          group.style.opacity = '1';
          
          // „Ç∞„É´„Éº„Éó„Çø„Ç§„Éà„É´„ÇÇË°®Á§∫
          const title = group.querySelector('.notion-collection-group-title');
          if (title) {
            title.style.display = 'list-item';
            title.style.visibility = 'visible';
            title.style.opacity = '1';
          }
        });
        
        // 5. „Éì„É•„Éº„Çø„Ç§„Éó„Çí„É™„Çπ„Éà„Å´Ë®≠ÂÆöÔºàFAQ„Éû„Çπ„Çø„ÉºÂØæÁ≠ñÔºâ
        const listView = view.querySelector('.notion-list-view');
        if (!listView && view.querySelector('.notion-gallery-view')) {
          console.log('  ‚Üí Converting gallery to list view for grouping');
          const galleryView = view.querySelector('.notion-gallery-view');
          galleryView.classList.remove('notion-gallery-view');
          galleryView.classList.add('notion-list-view');
        }
      }
      

      // 6. FAQ„Éû„Çπ„Çø„Éº„Å®„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆÁâπÂà•Âá¶ÁêÜ
      const normalizedBlockId = blockId.replace(/-/g, '');
      const targetDatabases = {
        '215b802cb0c6804a8858d72d4df6f128': 'FAQ„Éû„Çπ„Çø„Éº',
        '216b802cb0c6808fac1ddbf03d973fec': '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„Ç≥„É≥„ÉÜ„É≥„ÉÑÔºí'
      };
      
      if (targetDatabases[normalizedBlockId]) {
        console.log(`  üéØ ${targetDatabases[normalizedBlockId]} detected, applying special handling`);

        
        // „Éì„É•„Éº„ÅåÁ©∫„ÅÆÂ†¥Âêà„ÄÅrecordMap„Åã„Çâ„Éá„Éº„Çø„ÇíÂÜçÊßãÁØâ
        if (!view.querySelector('.notion-list-item') && window.recordMap) {
          reconstructDatabase(view, blockId, targetDatabases[normalizedBlockId]);
        }
      }
    });
  }
  
  // „Éá„Éº„Çø„Éô„Éº„Çπ„ÇíÂÜçÊßãÁØâ
  function reconstructDatabase(viewElement, blockId, dbName) {
    if (!window.recordMap) return;
    
    const cleanBlockId = blockId.replace(/-/g, '');
    const block = window.recordMap.block[blockId]?.value || 
                 window.recordMap.block[cleanBlockId]?.value;
    
    if (!block || !block.collection_id) return;
    
    console.log(`  üî® Reconstructing ${dbName} from recordMap`);
    
    // „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„Éá„Éº„Çø„ÇíÊé¢„Åô
    const collection = window.recordMap.collection[block.collection_id]?.value;
    if (!collection) return;
    
    // „Éö„Éº„Ç∏„Éñ„É≠„ÉÉ„ÇØ„ÇíÂèéÈõÜ
    const pages = [];
    Object.entries(window.recordMap.block).forEach(([id, data]) => {
      const pageBlock = data?.value;
      if (pageBlock?.parent_id === block.collection_id && 
          pageBlock?.parent_table === 'collection') {
        pages.push(pageBlock);
      }
    });
    
    if (pages.length === 0) return;
    
    console.log(`  üìù Found ${pages.length} FAQ items`);
    
    // „Ç∞„É´„Éº„ÉóÂåñ„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÊ±∫ÂÆö
    let groupPropertyId = 'oa:|'; // FAQ„Éû„Çπ„Çø„Éº„ÅÆ„Éá„Éï„Ç©„É´„Éà
    let groupPropertyName = '„Ç´„ÉÜ„Ç¥„É™';
    
    if (dbName === '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„Ç≥„É≥„ÉÜ„É≥„ÉÑÔºí') {
      groupPropertyId = 'status';
      groupPropertyName = 'Status';
    }
    
    // „Éó„É≠„Éë„ÉÜ„Ç£„Åß„Ç∞„É´„Éº„ÉóÂåñ
    const groups = {};
    pages.forEach(page => {
      const properties = page.properties || {};
      let groupValue = '„Åù„ÅÆ‰ªñ';
      
      // „Ç∞„É´„Éº„ÉóÂåñ„Éó„É≠„Éë„ÉÜ„Ç£„ÇíÊé¢„Åô
      for (const [propId, propValue] of Object.entries(properties)) {
        if (propValue?.[0]?.[0] === groupPropertyName || propId === groupPropertyId) {
          groupValue = propValue?.[0]?.[0] || '„Åù„ÅÆ‰ªñ';
          break;
        }
      }
      
      if (!groups[groupValue]) groups[groupValue] = [];
      groups[groupValue].push(page);
    });
    
    // DOM„ÇíÊßãÁØâ
    const container = document.createElement('div');
    container.className = 'notion-list-view';
    
    Object.entries(groups).forEach(([category, items]) => {
      const groupDiv = document.createElement('div');
      groupDiv.className = 'notion-collection-group';
      groupDiv.style.display = 'block';
      
      const groupTitle = document.createElement('summary');
      groupTitle.className = 'notion-collection-group-title';
      groupTitle.style.display = 'list-item';
      groupTitle.innerHTML = `
        <div style="display: flex; align-items: center; gap: 0.5em;">
          <svg width="12" height="12" viewBox="0 0 12 12">
            <path d="M6.02734 8.80274C6.27148 8.80274 6.47168 8.71484 6.66211 8.51465L10.2803 4.82324C10.4268 4.67676 10.5 4.49609 10.5 4.28125C10.5 3.85156 10.1484 3.5 9.72363 3.5C9.50879 3.5 9.30859 3.58789 9.15234 3.74902L6.03223 6.9668L2.90722 3.74902C2.74609 3.58789 2.55078 3.5 2.33105 3.5C1.90137 3.5 1.55469 3.85156 1.55469 4.28125C1.55469 4.49609 1.62793 4.67676 1.77441 4.82324L5.39258 8.51465C5.58789 8.71484 5.78808 8.80274 6.02734 8.80274Z" fill="currentColor"></path>
          </svg>
          <span>${category}</span>
          <span style="opacity: 0.5; font-size: 0.9em;">(${items.length})</span>
        </div>
      `;
      
      const itemsContainer = document.createElement('div');
      itemsContainer.className = 'notion-list-collection';
      
      items.forEach(item => {
        const itemDiv = document.createElement('div');
        itemDiv.className = 'notion-list-item';
        
        // „Çø„Ç§„Éà„É´„ÇíÂèñÂæó
        let title = 'Untitled';
        const titleProp = item.properties?.title || item.properties?.['title'];
        if (titleProp?.[0]?.[0]) {
          title = titleProp[0][0];
        }
        
        itemDiv.innerHTML = `
          <div class="notion-list-item-title">
            <span>${title}</span>
          </div>
        `;
        
        itemsContainer.appendChild(itemDiv);
      });
      
      groupDiv.appendChild(groupTitle);
      groupDiv.appendChild(itemsContainer);
      container.appendChild(groupDiv);
    });
    
    // Êó¢Â≠ò„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÁΩÆ„ÅçÊèõ„Åà
    viewElement.innerHTML = '';
    viewElement.appendChild(container);
    
    console.log(`  ‚úÖ ${dbName} reconstructed successfully`);
  }
  
  // ÂÆüË°å„Çø„Ç§„Éü„É≥„Ç∞„ÅÆÊúÄÈÅ©Âåñ
  function runWithRetries() {
    fixAllGroupedDatabases();
    
    // Ë§áÊï∞ÂõûÂÆüË°å„Åó„Å¶„ÄÅÈÅÖÂª∂Ë™≠„ÅøËæº„Åø„Åï„Çå„Çã„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇÇ„Ç≠„É£„ÉÉ„ÉÅ
    // 100ms„ÇíËøΩÂä†„Åó„Å¶„Çà„ÇäÊó©„ÅÑÊÆµÈöé„Åß„ÇÇÂÆüË°å
    const timings = [100, 500, 1000, 2000, 3000];
    timings.forEach(delay => {
      setTimeout(fixAllGroupedDatabases, delay);
    });
  }
  
  // DOM„ÅÆÂ§âÊõ¥„ÇíÁõ£Ë¶ñ
  const observer = new MutationObserver(function(mutations) {
    const hasRelevantChanges = mutations.some(mutation => {
      return Array.from(mutation.addedNodes).some(node => {
        return node.nodeType === 1 && (
          node.classList?.contains('notion-collection-view') ||
          node.querySelector?.('.notion-collection-view')
        );
      });
    });
    
    if (hasRelevantChanges) {
      console.log('üîß Unified Group Fix: Detected new content');
      setTimeout(fixAllGroupedDatabases, 100);
    }
  });
  
  // ÈñãÂßã
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', runWithRetries);
  } else {
    runWithRetries();
  }
  
  observer.observe(document.body, {
    childList: true,
    subtree: true
  });
  
  console.log('üîß Unified Group Fix: Initialized');
})();