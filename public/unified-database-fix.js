/**
 * Áµ±Âêà„Éá„Éº„Çø„Éô„Éº„Çπ‰øÆÊ≠£„Çπ„ÇØ„É™„Éó„Éà
 * „Åô„Åπ„Å¶„ÅÆ„Éá„Éº„Çø„Éô„Éº„Çπ‰øÆÊ≠£„ÇíÈ†ÜÂ∫èÁ´ã„Å¶„Å¶ÂÆüË°å„Åó„ÄÅÁ´∂Âêà„ÇíÈò≤„Åê
 */
(function() {
  'use strict';
  
  console.log('üîß [UnifiedDatabaseFix] Starting unified database fix...');
  
  // „Ç∞„É≠„Éº„Éê„É´Áä∂ÊÖãÁÆ°ÁêÜ
  const fixState = {
    isProcessing: false,
    processedBlocks: new Set(),
    recordMapReady: false,
    domReady: false
  };
  
  // ÂÆüË°åÂæÖÊ©ü„Ç≠„É•„Éº
  const executionQueue = [];
  
  /**
   * recordMap„ÅåÂÆåÂÖ®„Å´Ë™≠„ÅøËæº„Åæ„Çå„Å¶„ÅÑ„Çã„ÅãÁ¢∫Ë™ç
   */
  function checkRecordMapReady() {
    if (!window.recordMap) {
      return false;
    }
    
    // Âü∫Êú¨ÁöÑ„Å™„Éó„É≠„Éë„ÉÜ„Ç£„ÅÆÂ≠òÂú®Á¢∫Ë™ç
    const hasBlocks = window.recordMap.block && Object.keys(window.recordMap.block).length > 0;
    const hasCollections = window.recordMap.collection || true; // „Ç≥„É¨„ÇØ„Ç∑„Éß„É≥„ÅØÂøÖÈ†à„Åß„ÅØ„Å™„ÅÑ
    
    return hasBlocks && hasCollections;
  }
  
  /**
   * ‰øÆÊ≠£Âá¶ÁêÜ„Çí„Ç≠„É•„Éº„Å´ËøΩÂä†„Åó„ÄÅÈ†ÜÁï™„Å´ÂÆüË°å
   */
  function queueFix(name, fixFunction, priority = 5) {
    executionQueue.push({ name, fixFunction, priority });
    executionQueue.sort((a, b) => a.priority - b.priority);
  }
  
  /**
   * „Ç≠„É•„Éº„ÇíÂá¶ÁêÜ
   */
  async function processQueue() {
    if (fixState.isProcessing || executionQueue.length === 0) {
      return;
    }
    
    fixState.isProcessing = true;
    
    while (executionQueue.length > 0) {
      const { name, fixFunction } = executionQueue.shift();
      
      try {
        console.log(`[UnifiedDatabaseFix] Executing: ${name}`);
        await fixFunction();
        console.log(`[UnifiedDatabaseFix] Completed: ${name}`);
      } catch (error) {
        console.error(`[UnifiedDatabaseFix] Error in ${name}:`, error);
      }
      
      // Ê¨°„ÅÆÂá¶ÁêÜ„Åæ„ÅßÂ∞ë„ÅóÂæÖ„Å§ÔºàDOM„ÅÆÊõ¥Êñ∞„ÇíÂæÖ„Å§„Åü„ÇÅÔºâ
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    fixState.isProcessing = false;
  }
  
  /**
   * 1. Âü∫Êú¨ÁöÑ„Å™„Ç∞„É´„Éº„ÉóË°®Á§∫‰øÆÊ≠£
   */
  function fixBasicGroupDisplay() {
    const style = document.createElement('style');
    style.textContent = `
      .notion-collection-group,
      .notion-list-view-group {
        display: block !important;
        visibility: visible !important;
        opacity: 1 !important;
      }
      .notion-collection-group-title {
        display: list-item !important;
        cursor: pointer !important;
      }
    `;
    document.head.appendChild(style);
  }
  
  /**
   * 2. „Ç∞„É´„Éº„ÉóÂåñ„Åï„Çå„Åü„Éá„Éº„Çø„Éô„Éº„Çπ„Çí„É™„Çπ„Éà„Éì„É•„Éº„Å´Âàá„ÇäÊõø„Åà
   */
  function switchToListView() {
    if (!fixState.recordMapReady) return;
    
    const groupedDatabases = [];
    
    // „Ç∞„É´„Éº„ÉóÂåñ„Åï„Çå„Åü„Éì„É•„Éº„ÇíÊ§úÂá∫
    Object.entries(window.recordMap.collection_view || {}).forEach(([viewId, viewData]) => {
      const view = viewData?.value;
      if (view?.query2?.group_by || view?.format?.collection_group_by) {
        Object.entries(window.recordMap.block || {}).forEach(([blockId, blockData]) => {
          const block = blockData?.value;
          if (block?.view_ids?.includes(viewId) && !fixState.processedBlocks.has(blockId)) {
            groupedDatabases.push({ blockId, viewId });
            fixState.processedBlocks.add(blockId);
          }
        });
      }
    });
    
    // „É™„Çπ„Éà„Éì„É•„Éº„Å´Âàá„ÇäÊõø„Åà
    groupedDatabases.forEach(({ blockId }) => {
      const blockElement = document.querySelector(`.notion-block-${blockId}`);
      if (blockElement) {
        const tabs = blockElement.querySelectorAll('.notion-collection-view-tab');
        tabs.forEach((tab, index) => {
          if (tab.textContent?.toLowerCase().includes('list') || index === 0) {
            tab.click();
          }
        });
      }
    });
  }
  
  /**
   * 3. FAQ„Éû„Çπ„Çø„Éº„Å®„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÅÆ‰øÆÊ≠£
   */
  function fixGroupedDatabases() {
    const databases = [
      {
        blockId: '212b802cb0c680b3b04afec4203ee8d7',
        collectionId: '212b802c-b0c6-8014-9263-000b71bd252e',
        name: 'FAQ„Éû„Çπ„Çø„Éº',
        groupByProperty: '„Ç´„ÉÜ„Ç¥„É™'
      },
      {
        blockId: '216b802c-b0c6-808f-ac1d-dbf03d973fec',
        collectionId: '216b802c-b0c6-81c0-a940-000b2f6a23b3',
        name: '„Ç´„Éï„Çß„Ç≠„Éç„Ç∑„Ç≥„É≥„ÉÜ„É≥„ÉÑ',
        groupByProperty: 'xaH>'
      }
    ];
    
    databases.forEach(db => {
      const blockElement = document.querySelector(`.notion-block-${db.blockId}`);
      
      if (!blockElement || !window.recordMap) return;
      
      const block = window.recordMap.block[db.blockId]?.value;
    if (!block) return;
    
    const collectionId = block.collection_id || '212b802c-b0c6-8014-9263-000b71bd252e';
    const collection = window.recordMap.collection?.[collectionId]?.value;
    
    if (!collection) return;
    
    // „Ç¢„Ç§„ÉÜ„É†„ÇíÂèéÈõÜ
    const items = [];
    Object.entries(window.recordMap.block).forEach(([blockId, blockData]) => {
      const itemBlock = blockData?.value;
      if (itemBlock?.parent_id === collectionId && itemBlock?.properties) {
        items.push(itemBlock);
      }
    });
    
    if (items.length === 0) return;
    
    // „Ç∞„É´„Éº„ÉóÂåñ
    const groups = {};
    items.forEach(item => {
      const category = item.properties?.['„Ç´„ÉÜ„Ç¥„É™']?.select?.name || '„Åù„ÅÆ‰ªñ';
      if (!groups[category]) {
        groups[category] = [];
      }
      groups[category].push(item);
    });
    
    // Êó¢Â≠ò„ÅÆ„Ç≥„É≥„ÉÜ„É≥„ÉÑ„ÇíÁ¢∫Ë™ç
    const existingContent = faqBlock.querySelector('.notion-collection-view-type');
    if (existingContent && Object.keys(groups).length > 0) {
      // DOM„ÇíÂÜçÊßãÁØâ
      let html = '<div class="notion-list-view"><div class="notion-list-collection">';
      
      Object.entries(groups).forEach(([groupName, groupItems]) => {
        html += `
          <div class="notion-collection-group">
            <summary class="notion-collection-group-title">
              <div style="display: flex; align-items: center; gap: 0.5em;">
                <svg width="12" height="12" viewBox="0 0 12 12" style="transform: rotate(90deg);">
                  <path d="M6.02734 8.80274C6.27148 8.80274 6.47168 8.71484 6.66211 8.51465L10.2803 4.82324C10.4268 4.67676 10.5 4.49609 10.5 4.28125C10.5 3.85156 10.1484 3.5 9.72363 3.5C9.50879 3.5 9.30859 3.58789 9.15234 3.74902L6.03223 6.9668L2.90722 3.74902C2.74609 3.58789 2.55078 3.5 2.33105 3.5C1.90137 3.5 1.55469 3.85156 1.55469 4.28125C1.55469 4.49609 1.62793 4.67676 1.77441 4.82324L5.39258 8.51465C5.58789 8.71484 5.78808 8.80274 6.02734 8.80274Z" fill="currentColor"></path>
                </svg>
                <span>${groupName}</span>
                <span style="opacity: 0.5;">(${groupItems.length})</span>
              </div>
            </summary>
            <div class="notion-list-collection">
        `;
        
        groupItems.forEach(item => {
          const title = item.properties?.title?.title?.[0]?.text?.content || 'Untitled';
          html += `
            <div class="notion-list-item">
              <a href="/${item.id.replace(/-/g, '')}">
                ${title}
              </a>
            </div>
          `;
        });
        
        html += '</div></div>';
      });
      
      html += '</div></div>';
      existingContent.innerHTML = html;
    }
  }
  
  /**
   * 4. „Ç∞„É´„Éº„Éó„ÅÆÂèØË¶ñÊÄß„ÇíÁ¢∫‰øù
   */
  function ensureGroupVisibility() {
    const allGroups = document.querySelectorAll('.notion-collection-group, .notion-list-view-group');
    allGroups.forEach(group => {
      group.style.display = 'block';
      group.style.visibility = 'visible';
      group.style.opacity = '1';
    });
  }
  
  /**
   * „É°„Ç§„É≥ÂÆüË°åÈñ¢Êï∞
   */
  async function executeFixes() {
    // recordMap„ÅÆÊ∫ñÂÇô„ÇíÂæÖ„Å§
    fixState.recordMapReady = checkRecordMapReady();
    
    if (!fixState.recordMapReady) {
      console.log('[UnifiedDatabaseFix] Waiting for recordMap...');
      setTimeout(executeFixes, 500);
      return;
    }
    
    console.log('[UnifiedDatabaseFix] recordMap ready, queuing fixes...');
    
    // ‰øÆÊ≠£„Çí„Ç≠„É•„Éº„Å´ËøΩÂä†ÔºàÂÑ™ÂÖàÂ∫¶È†ÜÔºâ
    queueFix('Basic Group Display', fixBasicGroupDisplay, 1);
    queueFix('Switch to List View', switchToListView, 2);
    queueFix('FAQ Master Fix', fixFAQMaster, 3);
    queueFix('Ensure Group Visibility', ensureGroupVisibility, 4);
    
    // „Ç≠„É•„Éº„ÇíÂá¶ÁêÜ
    await processQueue();
    
    console.log('[UnifiedDatabaseFix] All fixes completed');
  }
  
  /**
   * MutationObserver„ÅßÂãïÁöÑ„Å™Â§âÊõ¥„ÇíÁõ£Ë¶ñ
   */
  const observer = new MutationObserver((mutations) => {
    // Êñ∞„Åó„ÅÑ„Éá„Éº„Çø„Éô„Éº„Çπ„ÅåËøΩÂä†„Åï„Çå„ÅüÂ†¥Âêà
    const hasNewDatabase = mutations.some(mutation => {
      return Array.from(mutation.addedNodes).some(node => {
        return node.nodeType === 1 && 
               (node.classList?.contains('notion-collection') ||
                node.querySelector?.('.notion-collection'));
      });
    });
    
    if (hasNewDatabase) {
      console.log('[UnifiedDatabaseFix] New database detected');
      setTimeout(() => {
        fixState.processedBlocks.clear(); // Âá¶ÁêÜÊ∏à„Åø„Çí„É™„Çª„ÉÉ„Éà
        executeFixes();
      }, 1000);
    }
  });
  
  // Áõ£Ë¶ñÈñãÂßã
  if (document.body) {
    observer.observe(document.body, {
      childList: true,
      subtree: true
    });
  }
  
  // ÂàùÂõûÂÆüË°å
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => {
      fixState.domReady = true;
      executeFixes();
    });
  } else {
    fixState.domReady = true;
    executeFixes();
  }
  
})();