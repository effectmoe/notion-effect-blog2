This file is a merged representation of a subset of the codebase, containing specifically included files and files not matching ignore patterns, combined into a single document by Repomix.
The content has been processed where content has been compressed (code blocks are separated by ⋮---- delimiter).

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Only files matching these patterns are included: **/README.md, **/readme.md, **/package.json, **/.env.example, **/tsconfig.json, **/next.config.js, **/site.config.ts, **/lib/site-config.ts, **/lib/types.ts, **/pages/index.tsx, **/pages/_app.tsx, **/pages/[pageId].tsx, **/components/NotionPage.tsx, **/components/Header.tsx, **/components/Footer.tsx
- Files matching these patterns are excluded: **/node_modules/**, **/.next/**, **/dist/**, **/build/**, **/*.log, **/coverage/**, **/.git/**, **/repomix*.xml, **/*summary.md, **/temp/**
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Content has been compressed - code blocks are separated by ⋮---- delimiter
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
components/
  Footer.tsx
  Header.tsx
  NotionPage.tsx
lib/
  site-config.ts
  types.ts
pages/
  _app.tsx
  [pageId].tsx
  index.tsx
.env.example
next.config.js
package.json
readme.md
site.config.ts
tsconfig.json
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path="components/Footer.tsx">
import { FaEnvelopeOpenText } from '@react-icons/all-files/fa/FaEnvelopeOpenText'
import { FaGithub } from '@react-icons/all-files/fa/FaGithub'
import { FaLinkedin } from '@react-icons/all-files/fa/FaLinkedin'
import { FaMastodon } from '@react-icons/all-files/fa/FaMastodon'
import { FaTwitter } from '@react-icons/all-files/fa/FaTwitter'
import { FaYoutube } from '@react-icons/all-files/fa/FaYoutube'
import { FaZhihu } from '@react-icons/all-files/fa/FaZhihu'
import { IoMoonSharp } from '@react-icons/all-files/io5/IoMoonSharp'
import { IoSunnyOutline } from '@react-icons/all-files/io5/IoSunnyOutline'
import { FaInstagram } from '@react-icons/all-files/fa/FaInstagram'
import { FaFacebook } from '@react-icons/all-files/fa/FaFacebook'
⋮----
import { useDarkMode } from '@/lib/use-dark-mode'
⋮----
import styles from './styles.module.css'
⋮----
// TODO: merge the data and icons from PageSocial with the social links in Footer
⋮----
href={`https://twitter.com/${config.twitter}`}
⋮----
href={`https://instagram.com/${config.instagram}`}
⋮----
href={`https://facebook.com/${config.facebook}`}
⋮----
href={`https://zhihu.com/people/${config.zhihu}`}
⋮----
href={`https://github.com/${config.github}`}
⋮----
href={`https://www.linkedin.com/in/${config.linkedin}`}
⋮----
href={`https://www.youtube.com/${config.youtube}`}
</file>

<file path=".env.example">
# ------------------------------------------------------------------------------
# This is an example .env file.
#
# All of these environment vars must be defined either in your environment or in
# a local .env file in order to run this app.
#
# @see https://github.com/rolodato/dotenv-safe for more details.
# ------------------------------------------------------------------------------

# Optional (for fathom analytics)
#NEXT_PUBLIC_FATHOM_ID=

# Optional (for PostHog analytics)
#NEXT_PUBLIC_POSTHOG_ID=

# Optional (for rendering tweets more efficiently)
#TWITTER_ACCESS_TOKEN=

# Optional (for persisting preview images to redis)
# NOTE: if you want to enable redis, only REDIS_HOST and REDIS_PASSWORD are required
# NOTE: don't forget to set isRedisEnabled to true in the site.config.ts file
#REDIS_HOST=
#REDIS_PASSWORD=
#REDIS_USER='default'
#REDIS_NAMESPACE='preview-images'
</file>

<file path="next.config.js">
const withBundleAnalyzer = bundleAnalyzer({
⋮----
export default withBundleAnalyzer({
⋮----
ignoreDuringBuilds: true, // ビルド時のESLintエラーを無視
⋮----
webpack: (config, _context) => {
// Workaround for ensuring that `react` and `react-dom` resolve correctly
// when using a locally-linked version of `react-notion-x`.
// @see https://github.com/vercel/next.js/issues/50391
const dirname = path.dirname(fileURLToPath(import.meta.url))
config.resolve.alias.react = path.resolve(dirname, 'node_modules/react')
config.resolve.alias['react-dom'] = path.resolve(
⋮----
// See https://react-tweet.vercel.app/next#troubleshooting
</file>

<file path="readme.md">
<p align="center">
  <a href="https://transitivebullsh.it/nextjs-notion-starter-kit">
    <img alt="Example article page" src="https://user-images.githubusercontent.com/552829/160132094-12875e09-41ec-450a-80fc-ae8cd488129d.jpg" width="689">
  </a>
</p>

# Next.js Notion Starter Kit

> The perfect starter kit for building websites with Next.js and Notion.

[![Build Status](https://github.com/transitive-bullshit/nextjs-notion-starter-kit/actions/workflows/build.yml/badge.svg)](https://github.com/transitive-bullshit/nextjs-notion-starter-kit/actions/workflows/build.yml) [![Prettier Code Formatting](https://img.shields.io/badge/code_style-prettier-brightgreen.svg)](https://prettier.io)

## Intro

This repo is what I use to power my personal blog and portfolio site [transitivebullsh.it](https://transitivebullsh.it).

It uses Notion as a CMS, [react-notion-x](https://github.com/NotionX/react-notion-x), [Next.js](https://nextjs.org/), and [Vercel](https://vercel.com).

## Features

- Setup only takes a few minutes ([single config file](./site.config.ts)) 💪
- Robust support for Notion content via [react-notion-x](https://github.com/NotionX/react-notion-x)
- Built using Next.js, TS, and React
- Excellent page speeds
- Smooth image previews
- Automatic social images
- Automatic pretty URLs
- Automatic table of contents
- Full support for dark mode
- Quick search via CMD+K / CMD+P
- Responsive for different devices
- Optimized for Next.js and Vercel

## Demos

- [Default demo](https://nextjs-notion-starter-kit.transitivebullsh.it) - Deployed from the `main` branch
- [My site](https://transitivebullsh.it) - Deployed from the `transitive-bullshit` branch

## Setup

**All config is defined in [site.config.ts](./site.config.ts).**

This project requires a recent version of Node.js (we recommend >= 16).

1. Fork / clone this repo
2. Change a few values in [site.config.ts](./site.config.ts)
3. `npm install`
4. `npm run dev` to test locally
5. `npm run deploy` to deploy to vercel 💪
6. Double check your [Vercel project settings](#vercel-configuration)

I tried to make configuration as easy as possible — All you really need to do to get started is edit `rootNotionPageId`.

We recommend duplicating the [default page](https://notion.so/7875426197cf461698809def95960ebf) as a starting point, but you can use any public notion page you want.

Make sure your root Notion page is **public** and then copy the link to your clipboard. Extract the last part of the URL that looks like `7875426197cf461698809def95960ebf`, which is your page's Notion ID.

In order to find your Notion workspace ID (optional), just load any of your site's pages into your browser and open up the developer console. There will be a global variable that you can access called `block` which is the Notion data for the current page. If you enter `block.space_id`, it will print out your page's workspace ID.

I recommend setting up a collection on your home page that contains all of your articles / projects / content. There are no structural constraints on your Notion workspace, however, so feel free to add content as you normally would in Notion.

### Vercel Configuration

**Social media preview images won't work by default on Vercel**. You'll need to ensure that your site doesn't require auth.

From your Vercel project settings, you'll want to **disable Vercel Authentication** from `Project -> Settings -> Deployment Protection`.

![How to disable Vercel Deployment Protection setting](https://github.com/user-attachments/assets/a1eb5a1f-da7a-497e-b4f6-f7e851a6cd8a 'How to disable Vercel Deployment Protection setting which causes social media preview image endpoint to return 401 Unauthorized')

💡 If you forget to do this your site will return `401 Unauthorized` responses when crawlers are trying to retrieve the images.

## URL Paths

The app defaults to slightly different URL paths in dev vs prod (though pasting any dev pathname into prod will work and vice-versa).

In development, it will use `/nextjs-notion-blog-d1b5dcf8b9ff425b8aef5ce6f0730202` which is a slugified version of the page's title suffixed with its Notion ID. I've found that it's really useful to always have the Notion Page ID front and center during local development.

In production, it will use `/nextjs-notion-blog` which is a bit nicer as it gets rid of the extra ID clutter.

The mapping of Notion ID to slugified page titles is done automatically as part of the build process. Just keep in mind that if you plan on changing page titles over time, you probably want to make sure old links will still work, and we don't currently provide a solution for detecting old links aside from Next.js's built-in [support for redirects](https://nextjs.org/docs/api-reference/next.config.js/redirects).

See [mapPageUrl](./lib/map-page-url.ts) and [getCanonicalPageId](https://github.com/NotionX/react-notion-x/blob/master/packages/notion-utils/src/get-canonical-page-id.ts) for more details.

You can override the default slug generation on a per-page basis by adding a `Slug` text property to your database. Any page which has a `Slug` property will use that as its slug.

NOTE: if you have multiple pages in your workspace with the same slugified name, the app will throw an error letting you know that there are duplicate URL pathnames.

## Preview Images

<p align="center">
  <img alt="Example preview image" src="https://user-images.githubusercontent.com/552829/160142320-35343317-aa9e-4710-bcf7-67e5cdec586d.gif" width="458">
</p>

We use [next/image](https://nextjs.org/docs/api-reference/next/image) to serve images efficiently, with preview images optionally generated via [lqip-modern](https://github.com/transitive-bullshit/lqip-modern). This gives us extremely optimized image support for sexy smooth images.

Preview images are **enabled by default**, but they can be slow to generate, so if you want to disable them, set `isPreviewImageSupportEnabled` to `false` in `site.config.ts`.

### Redis

If you want to cache generated preview images to speed up subsequent builds, you'll need to first set up an external [Redis](https://redis.io) data store. To enable redis caching, set `isRedisEnabled` to `true` in `site.config.ts` and then set `REDIS_HOST` and `REDIS_PASSWORD` environment variables to point to your redis instance.

You can do this locally by adding a `.env` file:

```bash
REDIS_HOST='TODO'
REDIS_PASSWORD='TODO'
```

If you're not sure which Redis provider to use, we recommend [Redis Labs](https://redis.com), which provides a free plan.

Note that preview images and redis caching are both optional features. If you’d rather not deal with them, just disable them in your site config.

## Styles

All CSS styles that customize Notion content are located in [styles/notion.css](./styles/notion.css). They mainly target global CSS classes exported by react-notion-x [styles.css](https://github.com/NotionX/react-notion-x/blob/master/packages/react-notion-x/src/styles.css).

Every notion block gets its own unique classname, so you can target individual blocks like this:

```css
.notion-block-260baa77f1e1428b97fb14ac99c7c385 {
  display: none;
}
```

## Dark Mode

<p align="center">
  <img alt="Light Mode" src="https://transitive-bs.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2F83ea9f0f-4761-4c0b-b53e-1913627975fc%2Ftransitivebullsh.it_-opt.jpg?table=block&id=ed7e8f60-c6d1-449e-840b-5c7762505c44&spaceId=fde5ac74-eea3-4527-8f00-4482710e1af3&width=2000&userId=&cache=v2" width="45%">
&nbsp; &nbsp; &nbsp; &nbsp;
  <img alt="Dark Mode" src="https://transitive-bs.notion.site/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fc0839d6c-7141-48df-8afd-69b27fed84aa%2Ftransitivebullsh.it__(1)-opt.jpg?table=block&id=23b11fe5-d6df-422d-9674-39cf7f547523&spaceId=fde5ac74-eea3-4527-8f00-4482710e1af3&width=2000&userId=&cache=v2" width="45%">
</p>

Dark mode is fully supported and can be toggled via the sun / moon icon in the footer.

## Automatic Social Images

<p align="center">
  <img alt="Example social image" src="https://user-images.githubusercontent.com/552829/162001133-34d4cf24-123a-4569-a540-f683b22830d1.jpeg" width="600">
</p>

All Open Graph and social meta tags are generated from your Notion content, which makes social sharing look professional by default.

Social images are generated automatically using [Vercel OG Image Generation](https://vercel.com/docs/concepts/functions/edge-functions/og-image-generation). You can tweak the default React template for social images by editing [api/social-images.tsx](./pages/api/social-image.tsx).

You can view an example social image live in production [here](https://transitivebullsh.it/api/social-image?id=dfc7f709-ae3e-42c6-9292-f6543d5586f0).

## Automatic Table of Contents

<p align="center">
  <img alt="Smooth ToC Scrollspy" src="https://www.notion.so/image/https%3A%2F%2Fs3-us-west-2.amazonaws.com%2Fsecure.notion-static.com%2Fcb2df62d-9028-440b-964b-117711450921%2Ftoc2.gif?table=block&id=d7e9951b-289c-4ff2-8b82-b0a61fe260b1&cache=v2" width="240">
</p>

By default, every article page will have a table of contents displayed as an `aside` on desktop. It uses **scrollspy** logic to automatically update the current section as the user scrolls through your document, and makes it really easy to jump between different sections.

If a page has less than `minTableOfContentsItems` (default 3), the table of contents will be hidden. It is also hidden on the index page and if the browser window is too small.

This table of contents uses the same logic that Notion uses for its built-in Table of Contents block (see [getPageTableOfContents](https://github.com/NotionX/react-notion-x/blob/master/packages/notion-utils/src/get-page-table-of-contents.ts) for the underlying logic).

## Responsive

<p align="center">
  <img alt="Mobile article page" src="https://user-images.githubusercontent.com/552829/160132983-c2dd5830-80b3-4a0e-a8f1-abab5dbeed11.jpg" width="300">
</p>

All pages are designed to be responsive across common device sizes.

## Analytics

Analytics are an optional feature that are easy to enable if you want.

### Fathom Analytics

[Fathom](https://usefathom.com/ref/42TFOZ) provides a lightweight alternative to Google Analytics.

To enable, just add a `NEXT_PUBLIC_FATHOM_ID` environment variable, which will only be used in production.

### PostHog Analytics

[PostHog](https://posthog.com/) provides a lightweight, **open source** alternative to Google Analytics.

To enable, just add a `NEXT_PUBLIC_POSTHOG_ID` environment variable, which will only be used in production.

## Environment Variables

If you're using Redis, analytics, or any other feature which requires environment variables, then you'll need to [add them to your Vercel project](https://vercel.com/docs/concepts/projects/environment-variables).

If you want to test your redis builds with GitHub Actions, then you'll need to edit the [default build action](./.github/workflows/build.yml) to add `REDIS_HOST` and `REDIS_PASSWORD`. Here is an [example from my personal branch](https://github.com/transitive-bullshit/nextjs-notion-starter-kit/blob/transitive-bullshit/.github/workflows/build.yml#L17-L21). You'll also need to add these environment variables to your GitHub repo as [repository secrets](https://docs.github.com/en/actions/security-guides/encrypted-secrets).

## Contributing

See the [contribution guide](contributing.md) and join our amazing list of [contributors](https://github.com/transitive-bullshit/nextjs-notion-starter-kit/graphs/contributors)!

## License

MIT © [Travis Fischer](https://transitivebullsh.it)

Support my open source work by <a href="https://twitter.com/transitive_bs">following me on twitter <img src="https://storage.googleapis.com/saasify-assets/twitter-logo.svg" alt="twitter" height="24px" align="center"></a>
</file>

<file path="tsconfig.json">
{
  "compilerOptions": {
    "target": "es2017",
    "lib": ["dom", "dom.iterable", "esnext"],
    "allowJs": true,
    "skipLibCheck": true,
    "strict": false,
    "forceConsistentCasingInFileNames": true,
    "noEmit": true,
    "esModuleInterop": true,
    "module": "esnext",
    "moduleResolution": "bundler",
    "moduleDetection": "force",
    "resolveJsonModule": true,
    "isolatedModules": true,
    "jsx": "preserve",
    "baseUrl": ".",
    "typeRoots": ["./node_modules/@types"],
    "incremental": true,
    "paths": {
      "@/components/*": ["components/*"],
      "@/lib/*": ["lib/*"],
      "@/styles/*": ["styles/*"]
    }
  },
  "exclude": ["node_modules"],
  "include": ["next-env.d.ts", "**/*.ts", "**/*.tsx", "site.config.ts"]
}
</file>

<file path="pages/[pageId].tsx">
import { type GetStaticProps } from 'next'
⋮----
import { NotionPage } from '@/components/NotionPage'
import { domain, isDev } from '@/lib/config'
import { getSiteMap } from '@/lib/get-site-map'
import { resolveNotionPage } from '@/lib/resolve-notion-page'
import { getMenuItems } from '@/lib/menu-utils'
import { type PageProps, type Params } from '@/lib/types'
⋮----
export const getStaticProps: GetStaticProps<PageProps, Params> = async (
  context
) =>
⋮----
// NotionデータベースからMenuがtrueの項目を取得
⋮----
// propsにmenuItemsを追加
⋮----
// we don't want to publish the error version of this page, so
// let next.js know explicitly that incremental SSG failed
⋮----
export async function getStaticPaths()
⋮----
// paths: [],
⋮----
export default function NotionDomainDynamicPage(props)
</file>

<file path="lib/site-config.ts">
export interface SiteConfig {
  rootNotionPageId: string
  rootNotionSpaceId?: string

  name: string
  domain: string
  author: string
  description?: string
  language?: string

  twitter?: string
  github?: string
  linkedin?: string
  newsletter?: string
  youtube?: string
  zhihu?: string
  mastodon?: string
  instagram?: string
  facebook?: string

  defaultPageIcon?: string | null
  defaultPageCover?: string | null
  defaultPageCoverPosition?: number | null

  isPreviewImageSupportEnabled?: boolean
  isTweetEmbedSupportEnabled?: boolean
  isRedisEnabled?: boolean
  isSearchEnabled?: boolean

  includeNotionIdInUrls?: boolean
  pageUrlOverrides?: types.PageUrlOverridesMap
  pageUrlAdditions?: types.PageUrlOverridesMap

  navigationStyle?: types.NavigationStyle
  navigationLinks?: Array<NavigationLink>
}
⋮----
export interface NavigationLink {
  title: string
  pageId?: string
  url?: string
}
⋮----
export const siteConfig = (config: SiteConfig): SiteConfig =>
</file>

<file path="site.config.ts">
import { siteConfig } from './lib/site-config'
⋮----
// the site's root Notion page (required)
⋮----
// if you want to restrict pages to a single notion workspace (optional)
// (this should be a Notion ID; see the docs for how to extract this)
⋮----
// basic site info (required)
⋮----
// open graph metadata (optional)
⋮----
// social usernames (optional)
// twitter: 'transitive_bs',
// github: 'transitive-bullshit',
// linkedin: 'fisch2',
⋮----
// youtube: 'your_channel_id_or_name',
// mastodon: '#', // optional mastodon profile URL, provides link verification
// newsletter: '#', // optional newsletter URL
// youtube: '#', // optional youtube channel name or `channel/UCGbXXXXXXXXXXXXXXXXXXXXXX`
⋮----
// default notion icon and cover images for site-wide consistency (optional)
// page-specific values will override these site-wide defaults
⋮----
// whether or not to enable support for LQIP preview images (optional)
⋮----
// whether or not redis is enabled for caching generated preview images (optional)
// NOTE: if you enable redis, you need to set the `REDIS_HOST` and `REDIS_PASSWORD`
// environment variables. see the readme for more info
⋮----
// map of notion page IDs to URL paths (optional)
// any pages defined here will override their default URL paths
// example:
//
// pageUrlOverrides: {
//   '/foo': '067dd719a912471ea9a3ac10710e7fdf',
//   '/bar': '0be6efce9daf42688f65c76b89f8eb27'
// }
⋮----
// whether to use the default notion navigation style or a custom one with links to
// important pages. To use `navigationLinks`, set `navigationStyle` to `custom`.
⋮----
// navigationStyle: 'custom',
// navigationLinks: [
//   {
//     title: 'About',
//     pageId: 'f1199d37579b41cbabfc0b5174f4256a'
//   },
//   {
//     title: 'Contact',
//     pageId: '6a29ebcb935a4f0689fe661ab5f3b8d1'
//   }
// ]
</file>

<file path="lib/types.ts">
import { type ParsedUrlQuery } from 'node:querystring'
⋮----
import { type ExtendedRecordMap, type PageMap } from 'notion-types'
⋮----
export type NavigationStyle = 'default' | 'custom'
⋮----
export interface PageError {
  message?: string
  statusCode: number
}
⋮----
export interface PageProps {
  site?: Site
  recordMap?: ExtendedRecordMap
  pageId?: string
  error?: PageError
}
⋮----
export interface ExtendedTweetRecordMap extends ExtendedRecordMap {
  tweets: Record<string, any>
}
⋮----
export interface Params extends ParsedUrlQuery {
  pageId: string
}
⋮----
export interface Site {
  name: string
  domain: string

  rootNotionPageId: string
  rootNotionSpaceId: string

  // settings
  html?: string
  fontFamily?: string
  darkMode?: boolean
  previewImages?: boolean

  // opengraph metadata
  description?: string
  image?: string
}
⋮----
// settings
⋮----
// opengraph metadata
⋮----
export interface SiteMap {
  site: Site
  pageMap: PageMap
  canonicalPageMap: CanonicalPageMap
}
⋮----
export interface CanonicalPageMap {
  [canonicalPageId: string]: string
}
⋮----
export interface PageUrlOverridesMap {
  // maps from a URL path to the notion page id the page should be resolved to
  // (this overrides the built-in URL path generation for these pages)
  [pagePath: string]: string
}
⋮----
// maps from a URL path to the notion page id the page should be resolved to
// (this overrides the built-in URL path generation for these pages)
⋮----
export interface PageUrlOverridesInverseMap {
  // maps from a notion page id to the URL path the page should be resolved to
  // (this overrides the built-in URL path generation for these pages)
  [pageId: string]: string
}
⋮----
// maps from a notion page id to the URL path the page should be resolved to
// (this overrides the built-in URL path generation for these pages)
⋮----
export interface NotionPageInfo {
  pageId: string
  title: string
  image: string
  imageObjectPosition: string
  author: string
  authorImage: string
  detail: string
}
⋮----
export interface SearchParams {
  query: string
  ancestorId?: string
  filters?: {
    isDeletedOnly?: boolean
    excludeTemplates?: boolean
    isNavigableOnly?: boolean
    requireEditPermissions?: boolean
    includePublicPagesWithoutExplicitAccess?: boolean
    ancestorIds?: string[]
    [key: string]: any
  }
  sort?: {
    field: string
    direction: 'asc' | 'desc'
  }
  limit?: number
  searchUrlOverride?: string
}
⋮----
export interface SearchResults {
  results: Array<{
    id: string
    title: string
    description?: string
    url?: string
    icon?: string
    [key: string]: any
  }>
  total: number
  recordMap: {
    block: Record<string, any>
    [key: string]: any
  }
  hasMore?: boolean
}
</file>

<file path="pages/_app.tsx">
// used for rendering equations (optional)
⋮----
// used for code syntax highlighting (optional)
⋮----
// core styles shared by all of react-notion-x (required)
⋮----
// global styles shared across the entire site
⋮----
// this might be better for dark mode
// import 'prismjs/themes/prism-okaidia.css'
// global style overrides for notion
⋮----
// global style overrides for prism theme (optional)
⋮----
import type { AppProps } from 'next/app'
⋮----
import { useRouter } from 'next/router'
import posthog from 'posthog-js'
⋮----
import { bootstrap } from '@/lib/bootstrap-client'
import {
  fathomConfig,
  fathomId,
  isServer,
  posthogConfig,
  posthogId
} from '@/lib/config'
import { getMenuItemsForStaticProps } from '@/lib/menu-utils'
import FontStyler from '@/components/FontStyler'
⋮----
// カスタムAppPropsの型定義を追加
type CustomAppProps = AppProps & {
  pageProps: {
    menuItems?: any[]
    [key: string]: any
  }
}
⋮----
export default function App(
⋮----
function onRouteChangeComplete()
⋮----
// FontStylerコンポーネントを追加してフォントをカスタマイズ
⋮----
// サーバーサイドでメニュー項目を取得
⋮----
// 元のgetInitialPropsを実行
⋮----
? await appContext.Component.getInitialProps(appContext.ctx)
⋮----
// Notionからメニュー項目を取得
⋮----
const menuItems = await getMenuItemsForStaticProps()
⋮----
// メニュー項目をページProps全体に追加
</file>

<file path="package.json">
{
  "name": "nextjs-notion-starter-kit",
  "version": "2.0.0",
  "private": true,
  "description": "The perfect starter kit for building beautiful websites with Next.js and Notion.",
  "author": "Travis Fischer <travis@transitivebullsh.it>",
  "repository": "transitive-bullshit/nextjs-notion-starter-kit",
  "license": "MIT",
  "engines": {
    "node": ">=18"
  },
  "type": "module",
  "scripts": {
    "dev": "next dev",
    "build": "next build",
    "start": "next start",
    "deploy": "vercel deploy",
    "deps:upgrade": "[ -z $GITHUB_ACTIONS ] && pnpm up -L notion-client notion-types notion-utils react-notion-x || echo 'Skipping deps:update on CI'",
    "deps:link": "[ -z $GITHUB_ACTIONS ] && run-s deps:link:* || echo 'Skipping deps:update on CI'",
    "deps:unlink": "[ -z $GITHUB_ACTIONS ] && pnpm add notion-client notion-types notion-utils react-notion-x || echo 'Skipping deps:update on CI'",
    "deps:link:notion-types": "pnpm link ../react-notion-x/packages/notion-types",
    "deps:link:notion-utils": "pnpm link ../react-notion-x/packages/notion-utils",
    "deps:link:notion-client": "pnpm link ../react-notion-x/packages/notion-client",
    "deps:link:react-notion-x": "pnpm link ../react-notion-x/packages/react-notion-x",
    "analyze": "cross-env ANALYZE=true next build",
    "analyze:server": "cross-env BUNDLE_ANALYZE=server next build",
    "analyze:browser": "cross-env BUNDLE_ANALYZE=browser next build",
    "test": "run-p test:*",
    "test:lint": "eslint .",
    "test:prettier": "prettier '**/*.{js,jsx,ts,tsx}' --check"
  },
  "dependencies": {
    "@fisch0920/use-dark-mode": "^2.4.0",
    "@keyvhq/core": "^1.6.9",
    "@keyvhq/redis": "^1.6.10",
    "@react-icons/all-files": "^4.1.0",
    "classnames": "^2.5.1",
    "date-fns": "^4.1.0",
    "expiry-map": "^2.0.0",
    "fathom-client": "^3.4.1",
    "framer-motion": "^12.7.3",
    "katex": "^0.16.22",
    "ky": "^1.7.2",
    "lqip-modern": "^2.2.1",
    "next": "^15.0.3",
    "notion-client": "^7.1.3",
    "notion-types": "^7.1.3",
    "notion-utils": "^7.1.3",
    "p-map": "^7.0.2",
    "p-memoize": "^7.1.1",
    "posthog-js": "^1.181.0",
    "prismjs": "^1.30.0",
    "react": "^18.2.0",
    "react-body-classname": "^1.3.1",
    "react-dom": "^18.2.0",
    "react-notion-x": "^7.2.3",
    "react-tweet": "^3.2.1",
    "react-use": "^17.4.2",
    "rss": "^1.2.2"
  },
  "devDependencies": {
    "@eslint/js": "^9.24.0",
    "@fisch0920/eslint-config": "^1.4.0",
    "@next/bundle-analyzer": "^15.0.2",
    "@next/eslint-plugin-next": "^15.3.0",
    "@types/node": "^22.8.6",
    "@types/react": "^18.0.21",
    "@typescript-eslint/eslint-plugin": "^8.29.1",
    "@typescript-eslint/parser": "^8.29.1",
    "cross-env": "^7.0.2",
    "eslint": "^8.57.1",
    "npm-run-all2": "^7.0.1",
    "prettier": "^3.3.3",
    "typescript": "^5.6.3"
  },
  "overrides": {
    "cacheable-request": {
      "keyv": "npm:@keyvhq/core@~1.6.6"
    }
  }
}
</file>

<file path="pages/index.tsx">
import { NotionPage } from '@/components/NotionPage'
import { domain } from '@/lib/config'
import { resolveNotionPage } from '@/lib/resolve-notion-page'
import { getMenuItems } from '@/lib/menu-utils'
import { notionViews } from '@/lib/notion-views'
⋮----
export const getStaticProps = async () =>
⋮----
// NotionデータベースからMenuがtrueの項目を取得
⋮----
// propsにmenuItemsを追加
⋮----
// we don't want to publish the error version of this page, so
// let next.js know explicitly that incremental SSG failed
⋮----
export default function NotionDomainPage(props)
</file>

<file path="components/Header.tsx">
import React, { useState, useEffect } from 'react'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { FaGithub } from '@react-icons/all-files/fa/FaGithub'
import { FaInstagram } from '@react-icons/all-files/fa/FaInstagram'
import { FaFacebook } from '@react-icons/all-files/fa/FaFacebook'
import { IoMoonSharp } from '@react-icons/all-files/io5/IoMoonSharp'
import { IoSunnyOutline } from '@react-icons/all-files/io5/IoSunnyOutline'
import { IoSearchOutline } from '@react-icons/all-files/io5/IoSearchOutline'
import cs from 'classnames'
⋮----
import { useDarkMode } from '@/lib/use-dark-mode'
import styles from './Header.module.css'
import { MenuItem } from '@/lib/menu-utils'
import { notionViews } from '@/lib/notion-views'
import HamburgerMenu from './HamburgerMenu'
⋮----
// notionViewsからフォールバック用メニュー項目を生成
⋮----
type HeaderProps = {
  menuItems?: MenuItem[]
}
⋮----
// menuItemsがundefinedの場合はDEFAULT_MENU_ITEMSを使用する
⋮----
// マウント状態の確認
⋮----
// 画面サイズのチェック
const checkIsMobile = () =>
⋮----
// 初期チェック
⋮----
// リサイズイベントリスナーを設定
⋮----
// 検索実行関数
const handleSearch = async (e) =>
⋮----
// 公式Notion APIを使用した検索エンドポイントを使用する
⋮----
// results.resultsが配列であることを確認
⋮----
// Enterキーで検索実行
const handleKeyDown = (e) =>
⋮----
// スクロール検出用のイベントリスナー
⋮----
const handleScroll = () =>
⋮----
// ダークモード切り替え
⋮----
// 現在のページに基づいてアクティブなメニュー項目を判断
const isActive = (url: string) =>
⋮----
// メニューの開閉を切り替える
const toggleMenu = () =>
⋮----
// メニューを開くときは検索を閉じる
⋮----
// 検索の表示/非表示を切り替える
const toggleSearch = () =>
⋮----
// 検索を開くときはメニューを閉じる
⋮----
// メニュー項目をクリックした時の処理
const handleMenuItemClick = () =>
⋮----
// メニューを閉じる
⋮----
// ロゴコンポーネント
const Logo = ()
⋮----
{/* ロゴ */}
⋮----
{/* デスクトップ用ナビゲーション - メニュー項目はハンバーガーメニューにのみ表示 */}
⋮----
{/* ここは空にして、メニュー項目はハンバーガーメニューにのみ表示する */}
⋮----
{/* ヘッダー右側の要素 */}
⋮----
{/* 検索ボタン */}
⋮----
{/* ダークモード切り替えボタン */}
⋮----
{/* SNSリンク */}
⋮----
href={`https://instagram.com/${config.instagram}`}
⋮----
className=
⋮----
href={`https://facebook.com/${config.facebook}`}
⋮----
{/* ハンバーガーメニューボタン（常に表示） */}
⋮----
{/* 検索オーバーレイ */}
⋮----
{/* 検索結果 */}
⋮----
// Notion APIの結果からデータを抽出
⋮----
// 公式APIのページオブジェクトからタイトルを取得する
⋮----
// 公式APIの構造の場合
⋮----
// ページのタイトル取得試行
⋮----
// ページの親がデータベースの場合
⋮----
// このページには他の方法でタイトルを取得する必要がある
title = '無題のページ'; // デフォルト
⋮----
// 旧APIや他の形式の互換性
⋮----
// 最終的にタイトルの安全確保
⋮----
// 結果と一緒に提供されるURLを使用する
⋮----
{/* 検索結果がない場合のメッセージ */}
⋮----
{/* モバイルメニュー（常に表示） */}
{/* <div className={cs(
        styles.mobileMenu,
        menuOpen ? styles.mobileMenuOpen : styles.mobileMenuClosed
      )}>
        <nav className={styles.mobileNav}>
          <ul className={styles.mobileNavList}>
            {items.map((item) => (
              <li key={item.id} className={styles.mobileNavItem}>
                <Link 
                  href={item.url} 
                  className={cs(
                    styles.mobileNavLink,
                    isActive(item.url) && styles.activeMobileLink
                  )}
                  onClick={handleMenuItemClick}
                >
                  {item.emoji && (
                    <span className={styles.menuItemEmoji}>{item.emoji}</span>
                  )}
                  {item.title}
                </Link>
              </li>
            ))}
          </ul>
        </nav>
      </div> */}
</file>

<file path="components/NotionPage.tsx">
import cs from 'classnames'
import dynamic from 'next/dynamic'
import Image from 'next/legacy/image'
import Link from 'next/link'
import { useRouter } from 'next/router'
import { type PageBlock } from 'notion-types'
import { formatDate, getBlockTitle, getPageProperty } from 'notion-utils'
⋮----
import BodyClassName from 'react-body-classname'
import {
  type NotionComponents,
  NotionRenderer,
  useNotionContext
} from 'react-notion-x'
import { EmbeddedTweet, TweetNotFound, TweetSkeleton } from 'react-tweet'
import { useSearchParam } from 'react-use'
⋮----
import { mapImageUrl } from '@/lib/map-image-url'
import { getCanonicalPageUrl, mapPageUrl } from '@/lib/map-page-url'
import { searchNotion } from '@/lib/search-notion'
import { useDarkMode } from '@/lib/use-dark-mode'
⋮----
import { Footer } from './Footer'
import { GitHubShareButton } from './GitHubShareButton'
import { Loading } from './Loading'
import { NotionPageHeader } from './NotionPageHeader'
import { Page404 } from './Page404'
import { PageAside } from './PageAside'
import { PageHead } from './PageHead'
import { Header } from './Header'
import styles from './styles.module.css'
⋮----
// -----------------------------------------------------------------------------
// dynamic imports for optional components
// -----------------------------------------------------------------------------
⋮----
// コードブロックコンポーネント - 改良版
⋮----
// add / remove any prism syntaxes here
⋮----
// 必須の基本言語
⋮----
// 人気のある言語
⋮----
// その他の言語も含める
⋮----
// HTMLテンプレート言語
⋮----
// データベースビューコンポーネント
⋮----
// 数式コンポーネント
⋮----
// PDFビューアーコンポーネント - SSRを無効化
⋮----
// モーダルコンポーネント - SSRを無効化
⋮----
function Tweet(
⋮----
const propertyLastEditedTimeValue = (
  { block, pageHeader },
  defaultFn: () => React.ReactNode
) =>
⋮----
const propertyDateValue = (
  { data, schema, pageHeader },
  defaultFn: () => React.ReactNode
) =>
⋮----
const propertyTextValue = (
  { schema, pageHeader },
  defaultFn: () => React.ReactNode
) =>
⋮----
// ナビゲーションメニュー項目
const getNavigationMenuItems = (site: types.Site) =>
⋮----
// デフォルトのメニュー項目
⋮----
menuItems // Notionデータベースからのメニューアイテムを受け取る
⋮----
// Notionのデフォルトヘッダーをカスタムヘッダーとして使わない
Header: () => null, // ヘッダーを非表示にする
⋮----
// ボディにNoNotionTabsクラスを追加
⋮----
// ナビゲーションメニュー項目を取得
⋮----
// lite mode is for oembed
⋮----
// const isRootPage =
//   parsePageId(block?.id) === parsePageId(site?.rootNotionPageId)
⋮----
// add important objects to the window global for easy debugging
⋮----
{/* Notionレンダラー - 内部のヘッダーをnullに設定したので、カスタムヘッダーを外に配置 */}
</file>

</files>
